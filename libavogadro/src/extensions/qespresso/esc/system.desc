ibrav 	INTEGER
Status: 	REQUIRED

      Bravais-lattice index. In all cases except ibrav=0,
      either [celldm(1)-celldm(6)] or [a,b,c,cosab,cosac,cosbc]
      must be specified: see their description. For ibrav=0
      you may specify the lattice parameter celldm(1) or a.

    ibrav      structure                   celldm(2)-celldm(6)
                                         or: b,c,cosab,cosac,cosbc
      0          free
          crystal axis provided in input: see card CELL_PARAMETERS

      1          cubic P (sc)
          v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,1)

      2          cubic F (fcc)
          v1 = (a/2)(-1,0,1),  v2 = (a/2)(0,1,1), v3 = (a/2)(-1,1,0)

      3          cubic I (bcc)
          v1 = (a/2)(1,1,1),  v2 = (a/2)(-1,1,1),  v3 = (a/2)(-1,-1,1)

      4          Hexagonal and Trigonal P        celldm(3)=c/a
          v1 = a(1,0,0),  v2 = a(-1/2,sqrt(3)/2,0),  v3 = a(0,0,c/a)

      5          Trigonal R, 3fold axis c        celldm(4)=cos(alpha)
          The crystallographic vectors form a three-fold star around
          the z-axis, the primitive cell is a simple rhombohedron:
          v1 = a(tx,-ty,tz),   v2 = a(0,2ty,tz),   v3 = a(-tx,-ty,tz)
          where c=cos(alpha) is the cosine of the angle alpha between
          any pair of crystallographic vectors, tx, ty, tz are:
            tx=sqrt((1-c)/2), ty=sqrt((1-c)/6), tz=sqrt((1+2c)/3)
     -5          Trigonal R, 3fold axis <111>    celldm(4)=cos(alpha)
          The crystallographic vectors form a three-fold star around
          <111>. Defining a' = a/sqrt(3) :
          v1 = a' (u,v,v),   v2 = a' (v,u,v),   v3 = a' (v,v,u)
          where u and v are defined as
            u = tz - 2*sqrt(2)*ty,  v = tz + sqrt(2)*ty
          and tx, ty, tz as for case ibrav=5

      6          Tetragonal P (st)               celldm(3)=c/a
          v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,c/a)

      7          Tetragonal I (bct)              celldm(3)=c/a
          v1=(a/2)(1,-1,c/a),  v2=(a/2)(1,1,c/a),  v3=(a/2)(-1,-1,c/a)

      8          Orthorhombic P                  celldm(2)=b/a
                                                 celldm(3)=c/a
          v1 = (a,0,0),  v2 = (0,b,0), v3 = (0,0,c)

      9          Orthorhombic base-centered(bco) celldm(2)=b/a
                                                 celldm(3)=c/a
          v1 = (a/2, b/2,0),  v2 = (-a/2,b/2,0),  v3 = (0,0,c)
     -9          as 9, alternate description
          v1 = (a/2,-b/2,0),  v2 = (a/2,-b/2,0),  v3 = (0,0,c)

     10          Orthorhombic face-centered      celldm(2)=b/a
                                                 celldm(3)=c/a
          v1 = (a/2,0,c/2),  v2 = (a/2,b/2,0),  v3 = (0,b/2,c/2)

     11          Orthorhombic body-centered      celldm(2)=b/a
                                                 celldm(3)=c/a
          v1=(a/2,b/2,c/2),  v2=(-a/2,b/2,c/2),  v3=(-a/2,-b/2,c/2)

     12          Monoclinic P, unique axis c     celldm(2)=b/a
                                                 celldm(3)=c/a,
                                                 celldm(4)=cos(ab)
          v1=(a,0,0), v2=(b*cos(gamma),b*sin(gamma),0),  v3 = (0,0,c)
          where gamma is the angle between axis a and b.
    -12          Monoclinic P, unique axis b     celldm(2)=b/a
                                                 celldm(3)=c/a,
                                                 celldm(5)=cos(ac)
          v1 = (a,0,0), v2 = (0,b,0), v3 = (c*sin(beta),0,c*cos(beta))
          where beta is the angle between axis a and c

     13          Monoclinic base-centered        celldm(2)=b/a
                                                 celldm(3)=c/a,
                                                 celldm(4)=cos(ab)
          v1 = (  a/2,         0,                -c/2),
          v2 = (b*cos(gamma), b*sin(gamma), 0),
          v3 = (  a/2,         0,                  c/2),
          where gamma is the angle between axis a and b

     14          Triclinic                       celldm(2)= b/a,
                                                 celldm(3)= c/a,
                                                 celldm(4)= cos(bc),
                                                 celldm(5)= cos(ac),
                                                 celldm(6)= cos(ab)
          v1 = (a, 0, 0),
          v2 = (b*cos(gamma), b*sin(gamma), 0)
          v3 = (c*cos(beta),  c*(cos(alpha)-cos(beta)cos(gamma))/sin(gamma),
               c*sqrt( 1 + 2*cos(alpha)cos(beta)cos(gamma)
                         - cos(alpha)^2-cos(beta)^2-cos(gamma)^2 )/sin(gamma) )
      where alpha is the angle between axis b and c
             beta is the angle between axis a and c
            gamma is the angle between axis a and b
             


celldm(i),i=1,6 	REAL
See: 	ibrav

    Crystallographic constants - see description of ibrav variable.

    * alat = celldm(1) is the lattice parameter "a" (in BOHR)
    * only needed celldm (depending on ibrav) must be specified
    * if ibrav=0 only alat = celldm(1) is used (if present)
                


A,B,C,cosAB,cosAC,cosBC 	REAL

    Traditional crystallographic constants: a,b,c in ANGSTROM
    cosAB = cosine of the angle between axis a and b (gamma)
    cosAC = cosine of the angle between axis a and c (beta)
    cosBC = cosine of the angle between axis b and c (alpha)
    specify either these OR celldm but NOT both.

    The axis are chosen according to the value of ibrav.
    If ibrav is not specified, the axis are taken from card
    CELL_PARAMETERS and only a is used as lattice parameter.
                


nat 	INTEGER
Status: 	REQUIRED

    number of atoms in the unit cell
             


ntyp 	INTEGER
Status: 	REQUIRED

    number of types of atoms in the unit cell
             


nbnd 	INTEGER
Default: 	for an insulator, nbnd = number of valence bands (nbnd = # of electrons /2); for a metal, 20% more (minimum 4 more)

    number of electronic states (bands) to be calculated.
    Note that in spin-polarized calculations the number of
    k-point, not the number of bands per k-point, is doubled
             


tot_charge 	REAL
Default: 	0.0

    total charge of the system. Useful for simulations with charged cells.
    By default the unit cell is assumed to be neutral (tot_charge=0).
    tot_charge=+1 means one electron missing from the system,
    tot_charge=-1 means one additional electron, and so on.

    In a periodic calculation a compensating jellium background is
    inserted to remove divergences if the cell is not neutral.
             


tot_magnetization 	REAL
Default: 	-1 [unspecified]

    total majority spin charge - minority spin charge.
    Used to impose a specific total electronic magnetization.
    If unspecified then tot_magnetization variable is ignored and
    the amount of electronic magnetization is determined during
    the self-consistent cycle.
             


starting_magnetization(i),i=1,ntyp 	REAL

    starting spin polarization on atomic type 'i' in a spin
    polarized calculation. Values range between -1 (all spins
    down for the valence electrons of atom type 'i') to 1
    (all spins up). Breaks the symmetry and provides a starting
    point for self-consistency. The default value is zero, BUT a
    value MUST be specified for AT LEAST one atomic type in spin
    polarized calculations, unless you constrain the magnetization
    (see "tot_magnetization" and "constrained_magnetization").
    Note that if you start from zero initial magnetization, you
    will invariably end up in a nonmagnetic (zero magnetization)
    state. If you want to start from an antiferromagnetic state,
    you may need to define two different atomic species
    corresponding to sublattices of the same atomic type.
    starting_magnetization is ignored if you are performing a
    non-scf calculation, if you are restarting from a previous
    run, or restarting from an interrupted run.
    If you fix the magnetization with "tot_magnetization",
    you should not specify starting_magnetization.
             


ecutwfc 	REAL
Status: 	REQUIRED

    kinetic energy cutoff (Ry) for wavefunctions
             


ecutrho 	REAL
Default: 	4 * ecutwfc

    kinetic energy cutoff (Ry) for charge density and potential
    For norm-conserving pseudopotential you should stick to the
    default value, you can reduce it by a little but it will
    introduce noise especially on forces and stress.
    If there are ultrasoft PP, a larger value than the default is
    often desirable (ecutrho = 8 to 12 times ecutwfc, typically).
    PAW datasets can often be used at 4*ecutwfc, but it depends
    on the shape of augmentation charge: testing is mandatory.
    The use of gradient-corrected functional, especially in cells
    with vacuum, or for pseudopotential without non-linear core
    correction, usually requires an higher values of ecutrho
    to be accurately converged.
             


ecutfock 	REAL
Default: 	ecutrho

    kinetic energy cutoff (Ry) for the exact exchange operator in
    EXX type calculations. By default this is the same as ecutrho
    but in some EXX calculations significant speed-up can be found
    by reducing ecutfock, at the expense of some loss in accuracy.
    Currently only implemented for the optimized gamma point only
    calculations.
             


nr1,nr2,nr3 	INTEGER

    three-dimensional FFT mesh (hard grid) for charge
    density (and scf potential). If not specified
    the grid is calculated based on the cutoff for
    charge density (see also "ecutrho")
             


nr1s,nr2s,nr3s 	INTEGER

    three-dimensional mesh for wavefunction FFT and for the smooth
    part of charge density ( smooth grid ).
    Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc ( default )
             


nosym 	LOGICAL
Default: 	.FALSE.

    if (.TRUE.) symmetry is not used. Note that
    - if the k-point grid is provided in input, it is used "as is"
      and symmetry-inequivalent k-points are not generated;
    - if the k-point grid is automatically generated, it will
      contain only points in the irreducible BZ for the bravais
      lattice, irrespective of the actual crystal symmetry.
    A careful usage of this option can be advantageous
    - in low-symmetry large cells, if you cannot afford a k-point
      grid with the correct symmetry
    - in MD simulations
    - in calculations for isolated atoms
             


nosym_evc 	LOGICAL
Default: 	.FALSE.

    if(.TRUE.) symmetry is not used but the k-points are
    forced to have the symmetry of the Bravais lattice;
    an automatically generated k-point grid will contain
    all the k-points of the grid and the points rotated by
    the symmetries of the Bravais lattice which are not in the
    original grid. If available, time reversal is
    used to reduce the k-points (and the q => -q symmetry
    is used in the phonon code). To disable also this symmetry set
    noinv=.TRUE..
             


noinv 	LOGICAL
Default: 	.FALSE.

    if (.TRUE.) disable the usage of k => -k symmetry
    (time reversal) in k-point generation
             


no_t_rev 	LOGICAL
Default: 	.FALSE.

    if (.TRUE.) disable the usage of magnetic symmetry operations
    that consist in a rotation + time reversal.
             


force_symmorphic 	LOGICAL
Default: 	.FALSE.

    if (.TRUE.) force the symmetry group to be symmorphic by disabling
    symmetry operations having an associated fractionary translation
             


use_all_frac 	LOGICAL
Default: 	.FALSE.

    if (.TRUE.) do not discard symmetry operations with an
    associated fractionary translation that does not send the
    real-space FFT grid into itself. These operations are
    incompatible with real-space symmetrization but not with the
    new G-space symmetrization. BEWARE: do not use for phonons!
    The phonon code still uses real-space symmetrization.
             


occupations 	CHARACTER

    'smearing':     gaussian smearing for metals
                    requires a value for degauss

    'tetrahedra' :  especially suited for calculation of DOS
                    (see P.E. Bloechl, PRB49, 16223 (1994))
                    Requires uniform grid of k-points,
                    automatically generated (see below)
                    Not suitable (because not variational) for
                    force/optimization/dynamics calculations

    'fixed' :       for insulators with a gap

    'from_input' :  The occupation are read from input file.
                    Requires "nbnd" to be set in input
             


one_atom_occupations 	LOGICAL
Default: 	.FALSE.

    This flag is used for isolated atoms (nat=1) together with
    occupations='from_input'. If it is .TRUE., the wavefunctions
    are ordered as the atomic starting wavefunctions, independently
    from their eigenvalue. The occupations indicate which atomic
    states are filled.
    The order of the states is written inside the UPF
    pseudopotential file.
    In the scalar relativistic case:
    S -> l=0, m=0
    P -> l=1, z, x, y
    D -> l=2, r^2-3z^2, xz, yz, xy, x^2-y^2
    In the noncollinear magnetic case (with or without spin-orbit),
    each group of states is doubled. For instance:
    P -> l=1, z, x, y for spin up, l=1, z, x, y for spin down.
    Up and down is relative to the direction of the starting
    magnetization.
    In the case with spin-orbit and time-reversal
    (starting_magnetization=0.0) the atomic wavefunctions are
    radial functions multiplied by spin-angle functions.
    For instance:
    P -> l=1, j=1/2, m_j=-1/2,1/2. l=1, j=3/2,
         m_j=-3/2, -1/2, 1/2, 3/2.
    In the magnetic case with spin-orbit the atomic wavefunctions
    can be forced to be spin-angle functions by setting
    starting_spin_angle to .TRUE..
             


starting_spin_angle 	LOGICAL
Default: 	.FALSE.

    In the spin-orbit case when domag=.TRUE., by default,
    the starting wavefunctions are initialized as in scalar
    relativistic noncollinear case without spin-orbit.
    By setting starting_spin_angle=.TRUE. this behaviour can
    be changed and the initial wavefunctions are radial
    functions multiplied by spin-angle functions.
    When domag=.FALSE. the initial wavefunctions are always
    radial functions multiplied by spin-angle functions
    independently from this flag.
    When lspinorb is .FALSE. this flag is not used.
             


degauss 	REAL
Default: 	0.D0 Ry

    value of the gaussian spreading (Ry) for brillouin-zone
    integration in metals.
             


smearing 	CHARACTER
Default: 	'gaussian'

    'gaussian', 'gauss':
        ordinary Gaussian spreading (Default)

    'methfessel-paxton', 'm-p', 'mp':
        Methfessel-Paxton first-order spreading
        (see PRB 40, 3616 (1989)).

    'marzari-vanderbilt', 'cold', 'm-v', 'mv':
        Marzari-Vanderbilt cold smearing
        (see PRL 82, 3296 (1999))

    'fermi-dirac', 'f-d', 'fd':
        smearing with Fermi-Dirac function
             


nspin 	INTEGER
Default: 	1

    nspin = 1 :  non-polarized calculation (default)

    nspin = 2 :  spin-polarized calculation, LSDA
                 (magnetization along z axis)

    nspin = 4 :  spin-polarized calculation, noncollinear
                 (magnetization in generic direction)
                 DO NOT specify nspin in this case;
                 specify "noncolin=.TRUE." instead
             


noncolin 	LOGICAL
Default: 	.false.

    if .true. the program will perform a noncollinear calculation.
             


ecfixed 	REAL
Default: 	0.0
See: 	q2sigma

qcutz 	REAL
Default: 	0.0
See: 	q2sigma

q2sigma 	REAL
Default: 	0.1

    ecfixed, qcutz, q2sigma:  parameters for modified functional to be
    used in variable-cell molecular dynamics (or in stress calculation).
    "ecfixed" is the value (in Rydberg) of the constant-cutoff;
    "qcutz" and "q2sigma" are the height and the width (in Rydberg)
    of the energy step for reciprocal vectors whose square modulus
    is greater than "ecfixed". In the kinetic energy, G^2 is
    replaced by G^2 + qcutz * (1 + erf ( (G^2 - ecfixed)/q2sigma) )
    See: M. Bernasconi et al, J. Phys. Chem. Solids 56, 501 (1995)
             


input_dft 	CHARACTER
Default: 	read from pseudopotential files

    Exchange-correlation functional: eg 'PBE', 'BLYP' etc
    See Modules/functionals.f90 for allowed values.
    Overrides the value read from pseudopotential files.
    Use with care and if you know what you are doing!
             


exx_fraction 	REAL
Default: 	it depends on the specified functional

    Fraction of EXX for hybrid functional calculations. In the case of
    input_dft='PBE0', the default value is 0.25, while for input_dft='B3LYP'
    the exx_fraction default value is 0.20.
             


screening_parameter 	REAL
Default: 	0.106

    screening_parameter for HSE like hybrid functionals.
    See J. Chem. Phys. 118, 8207 (2003)
    and J. Chem. Phys. 124, 219906 (2006) for more informations.
             


exxdiv_treatment 	CHARACTER
Default: 	gygi-baldereschi

    Specific for EXX. It selects the kind of approach to be used
    for treating the Coulomb potential divergencies at small q vectors.

    gygi-baldereschi : appropriated for cubic and quasi-cubic supercells
    vcut_spherical : appropriated for cubic and quasi-cubic supercells
    vcut_ws : appropriated for strongly anysotropic supercells, see also
              ecutvcut.
    none : sets Coulomb potential at G,q=0 to 0.0
             


ecutvcut 	REAL
Default: 	0.0 Ry
See: 	exxdiv_treatment

    Reciprocal space cutoff for correcting
    Coulomb potential divergencies at small q vectors.
             


nqx1,nqx2,nqx3 	INTEGER

    three-dimensional mesh for q (k1-k2) sampling of
    the Fock operator (EXX). Can be smaller than
    the number of kpoints.
             


lda_plus_u 	LOGICAL
Default: 	.FALSE.
Status: 	DFT+U (formerly known as LDA+U) currently works only for a few selected elements. Modify PW/set_hubbard_l.f90 and PW/tabd.f90 if you plan to use DFT+U with an element that is not configured there.

    Specify lda_plus_u = .TRUE. to enable DFT+U calculations
    See: Anisimov, Zaanen, and Andersen, PRB 44, 943 (1991);
         Anisimov et al., PRB 48, 16929 (1993);
         Liechtenstein, Anisimov, and Zaanen, PRB 52, R5467 (1994).
    You must specify, for each species with a U term, the value of
    U and (optionally) alpha, J of the Hubbard model (all in eV):
    see lda_plus_u_kind, Hubbard_U, Hubbard_alpha, Hubbard_J
             


lda_plus_u_kind 	INTEGER
Default: 	0

    Specifies the type of DFT+U calculation:
                      0   simplified version of Cococcioni and de Gironcoli,
                          PRB 71, 035105 (2005), using Hubbard_U
                      1   rotationally invariant scheme of Liechtenstein et al.,
                          using Hubbard_U and Hubbard_J
             


Hubbard_U(i),i=1,ntyp  	REAL
Default: 	0.D0 for all species

    Hubbard_U(i): U parameter (eV) for species i, DFT+U calculation
             


Hubbard_alpha(i),i=1,ntyp 	REAL
Default: 	0.D0 for all species

    Hubbard_alpha(i) is the perturbation (on atom i, in eV)
    used to compute U with the linear-response method of
    Cococcioni and de Gironcoli, PRB 71, 35105 (2005)
    (only for lda_plus_u_kind=0)
             


Hubbard_J(i,ityp) 	REAL
Default: 	0.D0 for all species

    Hubbard_J(i,ityp): J parameters (eV) for species ityp,
    used in DFT+U calculations (only for lda_plus_u_kind=1)
    For p orbitals:  J = Hubbard_J(1,ityp);
    For d orbitals:  J = Hubbard_J(1,ityp), B = Hubbard_J(2,ityp);
    For f orbitals:  J = Hubbard_J(1,ityp), E2 = Hubbard_J(2,ityp),
                     E3= Hubbard_J(3,ityp).
    If B or E2 or E3 are not specified or set to 0 they will be
    calculated from J using atomic ratios.
             


starting_ns_eigenvalue(m,ispin,I) 	REAL
Default: 	-1.d0 that means NOT SET

    In the first iteration of an DFT+U run it overwrites
    the m-th eigenvalue of the ns occupation matrix for the
    ispin component of atomic species I. Leave unchanged
    eigenvalues that are not set. This is useful to suggest
    the desired orbital occupations when the default choice
    takes another path.
             


U_projection_type 	CHARACTER
Default: 	'atomic'

    Only active when lda_plus_U is .true., specifies the type
    of projector on localized orbital to be used in the DFT+U
    scheme.

    Currently available choices:
    'atomic': use atomic wfc's (as they are) to build the projector

    'ortho-atomic': use Lowdin orthogonalized atomic wfc's

    'norm-atomic':  Lowdin normalization of atomic wfc. Keep in mind:
                    atomic wfc are not orthogonalized in this case.
                    This is a "quick and dirty" trick to be used when
                    atomic wfc from the pseudopotential are not
                    normalized (and thus produce occupation whose
                    value exceeds unity). If orthogonalized wfc are
                    not needed always try 'atomic' first.

    'file':         use the information from file "prefix".atwfc that must
                    have been generated previously, for instance by pmw.x
                    (see PP/poormanwannier.f90 for details)

    NB: forces and stress currently implemented only for the
    'atomic' choice.
             


edir 	INTEGER

    The direction of the electric field or dipole correction is
    parallel to the bg(:,edir) reciprocal lattice vector, so the
    potential is constant in planes defined by FFT grid points;
    edir = 1, 2 or 3. Used only if tefield is .TRUE.
             


emaxpos 	REAL
Default: 	0.5D0

    Position of the maximum of the sawlike potential along crystal
    axis "edir", within the  unit cell (see below), 0 < emaxpos < 1
    Used only if tefield is .TRUE.
             


eopreg 	REAL
Default: 	0.1D0

    Zone in the unit cell where the sawlike potential decreases.
    ( see below, 0 < eopreg < 1 ). Used only if tefield is .TRUE.
             


eamp 	REAL
Default: 	0.001 a.u.

    Amplitude of the electric field, in ***Hartree*** a.u.;
    1 a.u. = 51.4220632*10^10 V/m). Used only if tefield=.TRUE.
    The sawlike potential increases with slope "eamp" in the
    region from (emaxpos+eopreg-1) to (emaxpos), then decreases
    to 0 until (emaxpos+eopreg), in units of the crystal
    vector "edir". Important: the change of slope of this
    potential must be located in the empty region, or else
    unphysical forces will result.
             


angle1(i),i=1,ntyp 	REAL

    The angle expressed in degrees between the initial
    magnetization and the z-axis. For noncollinear calculations
    only; index i runs over the atom types.
             


angle2(i),i=1,ntyp 	REAL

    The angle expressed in degrees between the projection
    of the initial magnetization on x-y plane and the x-axis.
    For noncollinear calculations only.
             


constrained_magnetization 	CHARACTER
Default: 	'none'
See: 	lambda, fixed_magnetization

    Used to perform constrained calculations in magnetic systems.
    Currently available choices:

    'none':
             no constraint

    'total':
             total magnetization is constrained by
             adding a penalty functional to the total energy:

             LAMBDA * SUM_{i} ( magnetization(i) - fixed_magnetization(i) )**2

             where the sum over i runs over the three components of
             the magnetization. Lambda is a real number (see below).
             Noncolinear case only. Use "tot_magnetization" for LSDA

    'atomic':
             atomic magnetization are constrained to the defined
             starting magnetization adding a penalty:

             LAMBDA * SUM_{i,itype} ( magnetic_moment(i,itype) - mcons(i,itype) )**2

             where i runs over the cartesian components (or just z
             in the collinear case) and itype over the types (1-ntype).
             mcons(:,:) array is defined from starting_magnetization,
             (and angle1, angle2 in the non-collinear case). lambda is
             a real number

    'total direction':
              the angle theta of the total magnetization
              with the z axis (theta = fixed_magnetization(3))
              is constrained:

              LAMBDA * ( arccos(magnetization(3)/mag_tot) - theta )**2

              where mag_tot is the modulus of the total magnetization.

    'atomic direction':
              not all the components of the atomic
              magnetic moment are constrained but only the cosine
              of angle1, and the penalty functional is:

              LAMBDA * SUM_{itype} ( mag_mom(3,itype)/mag_mom_tot - cos(angle1(ityp)) )**2

    N.B.: symmetrization may prevent to reach the desired orientation
          of the magnetization. Try not to start with very highly symmetric
          configurations or use the nosym flag (only as a last remedy)
             


fixed_magnetization(i),i=1,3 	REAL
Default: 	0.d0
See: 	constrained_magnetization

    value of the total magnetization to be maintained fixed when
    constrained_magnetization='total'
             


lambda 	REAL
Default: 	1.d0
See: 	constrained_magnetization

    parameter used for constrained_magnetization calculations
    N.B.: if the scf calculation does not converge, try to reduce lambda
          to obtain convergence, then restart the run with a larger lambda
             


report 	INTEGER
Default: 	1

    It is the number of iterations after which the program
    write all the atomic magnetic moments.
             


lspinorb 	LOGICAL

    if .TRUE. the noncollinear code can use a pseudopotential with
    spin-orbit.
             


assume_isolated 	CHARACTER
Default: 	'none'

    Used to perform calculation assuming the system to be
    isolated (a molecule of a clustr in a 3D supercell).

    Currently available choices:

    'none' (default): regular periodic calculation w/o any correction.

    'makov-payne', 'm-p', 'mp' : the Makov-Payne correction to the
             total energy is computed. An estimate of the vacuum
             level is also calculated so that eigenvalues can be
             properly aligned. ONLY FOR CUBIC SYSTEMS (ibrav=1,2,3)
             Theory:
             G.Makov, and M.C.Payne,
             "Periodic boundary conditions in ab initio
             calculations" , Phys.Rev.B 51, 4014 (1995)

    'dcc' :  density counter charge correction CURRENTLY DISABLED
             The electrostatic problem is solved in open boundary
             conditions (OBC). This approach provides the correct
             scf potential and energies (not just a correction to
             energies as 'mp'). BEWARE: the molecule should be
             centered around the middle of the cell, not around
             the origin (0,0,0).
             Theory described in:
             I.Dabo, B.Kozinsky, N.E.Singh-Miller and N.Marzari,
             "Electrostatic periodic boundary conditions and
             real-space corrections", Phys.Rev.B 77, 115139 (2008)

    'martyna-tuckerman', 'm-t', 'mt' : Martyna-Tuckerman correction.
             As for the dcc correction the scf potential is also
             corrected. Implementation adapted from:
             G.J. Martyna, and M.E. Tuckerman,
             "A reciprocal space based method for treating long
             range interactions in ab-initio and force-field-based
             calculation in clusters", J.Chem.Phys. 110, 2810 (1999)

    'esm' :  Effective Screening Medium Method.
             For polarized or charged slab calculation, embeds
             the simulation cell within an effective semi-
             infinite medium in the perpendicular direction
             (along z). Embedding regions can be vacuum or
             semi-infinite metal electrodes (use 'esm_bc' to
             choose boundary conditions). If between two
             electrodes, an optional electric field
             ('esm_efield') may be applied. Method described in
             M. Otani and O. Sugino, "First-principles
             calculations of charged surfaces and interfaces:
             A plane-wave nonrepeated slab approach," PRB 73,
             115407 (2006).
             NB: Requires cell with a_3 lattice vector along z,
             normal to the xy plane, with the slab centered
             around z=0. Also requires symmetry checking to be
             disabled along z, either by setting 'nosym' = .TRUE.
             or by very slight displacement (i.e., 5e-4 a.u.)
             of the slab along z.
             See 'esm_bc', 'esm_efield', 'esm_w', 'esm_nfit'.
             


esm_bc 	CHARACTER
Default: 	'pbc'
See: 	assume_isolated

    If assume_isolated = 'esm', determines the boundary
    conditions used for either side of the slab.

    Currently available choices:

    'pbc' (default): regular periodic calculation (no ESM).

    'bc1' : Vacuum-slab-vacuum (open boundary conditions)

    'bc2' : Metal-slab-metal (dual electrode configuration).
            See also 'esm_efield'.

    'bc3' : Vacuum-slab-metal
             


esm_w 	REAL
Default: 	0.d0
See: 	assume_isolated

    If assume_isolated = 'esm', determines the position offset
    [in a.u.] of the start of the effective screening region,
    measured relative to the cell edge. (ESM region begins at
    z = +/- [L_z/2 + esm_w] ).
             


esm_efield 	REAL
Default: 	0.d0
See: 	assume_isolated, esm_bc

    If assume_isolated = 'esm' and esm_bc = 'bc2', gives the
    magnitude of the electric field [Ryd/a.u.] to be applied
    between semi-infinite ESM electrodes.
             


esm_nfit 	INTEGER
Default: 	4
See: 	assume_isolated

    If assume_isolated = 'esm', gives the number of z-grid points
    for the polynomial fit along the cell edge.
             


london 	LOGICAL
Default: 	.FALSE.

    if .TRUE. compute semi-empirical dispersion term (DFT-D).
    See S. Grimme, J. Comp. Chem. 27, 1787 (2006), and
    V. Barone et al., J. Comp. Chem. 30, 934 (2009).
             


london_s6 	REAL
Default: 	0.75

    global scaling parameter for DFT-D. Default is good for PBE.
             


london_rcut 	REAL
Default: 	200

    cutoff radius (a.u.) for dispersion interactions
             

