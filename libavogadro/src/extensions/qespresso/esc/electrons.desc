electron_maxstep 	INTEGER
Default: 	100

    maximum number of iterations in a scf step
             


scf_must_converge 	LOGICAL
Default: 	.TRUE.

    If .false. do not stop molecular dynamics or ionic relaxation
    when electron_maxstep is reached. Use with care.
             


conv_thr 	REAL
Default: 	1.D-6

    Convergence threshold for selfconsistency:
    estimated energy error < conv_thr
    (note that conv_thr is extensive, like the total energy)
             


adaptive_thr 	LOGICAL
Default: 	.FALSE

    If .TRUE. this turns on the use of an adaptive conv_thr for
    the inner scf loops when using EXX.
             


conv_thr_init 	REAL
Default: 	1.D-3

    When adaptive_thr = .TRUE. this is the convergence threshold
    used for the first scf cycle.
             


conv_thr_multi 	REAL
Default: 	1.D-1

    When adaptive_thr = .TRUE. the convergence threshold for
    each scf cycle is given by:
    min( conv_thr, conv_thr_multi * dexx )
             


mixing_mode 	CHARACTER
Default: 	'plain'

    'plain' :    charge density Broyden mixing

    'TF' :       as above, with simple Thomas-Fermi screening
                (for highly homogeneous systems)

    'local-TF':  as above, with local-density-dependent TF screening
                 (for highly inhomogeneous systems)
             


mixing_beta 	REAL
Default: 	0.7D0

    mixing factor for self-consistency
             


mixing_ndim 	INTEGER
Default: 	8

    number of iterations used in mixing scheme
             


mixing_fixed_ns 	INTEGER
Default: 	0

    For DFT+U : number of iterations with fixed ns ( ns is the
      atomic density appearing in the Hubbard term ).
             


diagonalization 	CHARACTER
Default: 	'david'

    'david':  Davidson iterative diagonalization with overlap matrix
              (default). Fast, may in some rare cases fail.

    'cg' :    conjugate-gradient-like band-by-band diagonalization
              Typically slower than 'david' but it uses less memory
              and is more robust (it seldom fails)

    'cg-serial', 'david-serial': obsolete, use "-ndiag 1 instead"
              The subspace diagonalization in Davidson is performed
              by a fully distributed-memory parallel algorithm on
              4 or more processors, by default. The allocated memory
              scales down with the number of procs. Procs involved
              in diagonalization can be changed with command-line
              option "-ndiag N". On multicore CPUs it is often
              convenient to let just one core per CPU to work
              on linear algebra.
             


diago_thr_init 	REAL

    Convergence threshold for the first iterative diagonalization
    (the check is on eigenvalue convergence).
    For scf calculations, the default is 1.D-2 if starting from a
    superposition of atomic orbitals; 1.D-5 if starting from a
    charge density. During self consistency the threshold (ethr)
    is automatically reduced when approaching convergence.
    For non-scf calculations, this is the threshold used in the
    iterative diagonalization. The default is conv_thr /N elec.
             


diago_cg_maxiter 	INTEGER

    For conjugate gradient diagonalization:
    max number of iterations
             


diago_david_ndim 	INTEGER
Default: 	4

    For Davidson diagonalization: dimension of workspace
    (number of wavefunction packets, at least 2 needed).
    A larger value may yield a somewhat faster algorithm
    but uses more memory. The opposite holds for smaller values.
    Try diago_david_ndim=2 if you are tight on memory or if
    your job is large: the speed penalty is often negligible
             


diago_full_acc 	LOGICAL
Default: 	.FALSE.

    If .TRUE. all the empty states are diagonalized at the same level
    of accuracy of the occupied ones. Otherwise the empty states are
    diagonalized using a larger threshold (this should not affect
    total energy, forces, and other ground-state properties).
             


efield 	REAL
Default: 	0.D0

    Amplitude of the finite electric field (in Ry a.u.;
    1 a.u. = 36.3609*10^10 V/m). Used only if lelfield=.TRUE.
    and if k-points (K_POINTS card) are not automatic.
             


efield_cart(i),i=1,3 	REAL
Default: 	(0.D0, 0.D0, 0.D0)

    Finite electric field (in Ry a.u.=36.3609*10^10 V/m) in
    cartesian axis. Used only if lelfield=.TRUE. and if
    k-points (K_POINTS card) are automatic.
             


startingpot 	CHARACTER

    'atomic': starting potential from atomic charge superposition
              ( default for scf, *relax, *md )

    'file'  : start from existing "charge-density.xml" file
              For nscf and bands alculation this is the default
              and the only sensible possibility.
             


startingwfc 	CHARACTER
Default: 	'atomic+random'

    'atomic': start from superposition of atomic orbitals
              If not enough atomic orbitals are available,
              fill with random numbers the remaining wfcs
              The scf typically starts better with this option,
              but in some high-symmetry cases one can "loose"
              valence states, ending up in the wrong ground state.

    'atomic+random': as above, plus a superimposed "randomization"
              of atomic orbitals. Prevents the "loss" of states
              mentioned above.

    'random': start from random wfcs. Slower start of scf but safe.
              It may also reduce memory usage in conjunction with
              diagonalization='cg'

    'file':   start from a wavefunction file
             


tqr 	LOGICAL
Default: 	.FALSE.

    If .true., use the real-space algorithm for augmentation
    charges in ultrasoft pseudopotentials.
    Must faster execution of ultrasoft-related calculations,
    but numerically less accurate than the default algorithm.
    Use with care and after testing!
             

